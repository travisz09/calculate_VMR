#VMR_Calculator
library(tidyverse)

data <- read.csv(file.choose())

data

calculate_VMR <- function(K, X, verbose = F) {
  n <- sum(K*X)
  x <- sum(X)
  u <- n/x
  Ku <- K - u
  Ku2 <- Ku^2
  XKu2 <- X*Ku2
  total_XKu2 <- sum(XKu2)
  s2 <- total_XKu2/(x-1)
  VMR <- s2/u
  if (VMR < 0.25) {
    pattern <- "highly uniform"
  } else {
    if (VMR < 0.5) {
      pattern <- "uniform"
    } else {
      if (VMR < 0.75) {
        pattern <- "approaching uniform"
      } else {
        if (VMR < 1.25) {
          pattern <- "random"
        } else {
          if (VMR < 1.5) {
            pattern <- "approaching clustered"
          } else {
            if (VMR < 1.75) {
              pattern <- "culstered"
            } else {pattern <- "highly clustered"}
          }
        }
      }
    }
  }
  
  
  if (verbose == T) {
    suppressWarnings({
      VMR_table <- data%>%
      rename(`COUNTS_(K)` = grep(K, data),
             `FREQUENCY_(X)` = grep(X, data))%>%
      select(`COUNTS_(K)`, `FREQUENCY_(X)`)%>%
      mutate(`K-μ` = `COUNTS_(K)` - u,
             `(K-μ)^2` = `K-μ`^2,
             `X(K-μ)^2` = `FREQUENCY_(X)` * `(K-μ)^2`)
    })
    print(paste("Total number of points (n) = ", n, sep = ""))
    print(paste("Total number of quadrats (x) = ", x, sep = ""))
    print(paste("Mean quadrat counts (\u03BC) = n/x = ", n, sep = ""))
    print(VMR_table)
    print(paste("Total X(K - \u03BC)^2 = ", total_XKu2, sep = ""))
    print(paste("Variance (s\u00B2) = (\u2211X(K-u)^2)/(x-1) = ", s2, sep = ""))
    print(paste("VMR = s\u00B2/\u03BC = ", round(VMR, 6), sep = ""))
    print(paste("The pattern appears ", pattern, ".", sep = ""))
    
  }
  
  return(VMR)
}

VMR <- calculate_VMR(data$sum_weight, data$FREQUENCY, verbose = T)
